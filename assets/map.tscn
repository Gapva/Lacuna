[gd_scene load_steps=24 format=2]

[ext_resource path="res://assets/cursor.svg" type="Texture" id=1]
[ext_resource path="res://assets/lyrics.gd" type="Script" id=2]
[ext_resource path="res://assets/handler.gd" type="Script" id=3]
[ext_resource path="res://addons/godot-polyliner/Line3D/Line3D.gd" type="Script" id=4]
[ext_resource path="res://assets/field.gd" type="Script" id=5]
[ext_resource path="res://assets/flashlight.svg" type="Texture" id=6]

[sub_resource type="Curve" id=20]
min_value = -360.0
max_value = 180.0
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 180 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=21]
curve = SubResource( 20 )

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0.392157 )

[sub_resource type="GradientTexture" id=13]
gradient = SubResource( 2 )

[sub_resource type="Curve" id=7]
max_value = 2.0
_data = [ Vector2( 0, 2 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=14]
curve = SubResource( 7 )

[sub_resource type="ParticlesMaterial" id=5]
gravity = Vector3( 0, 0, 0 )
angle_curve = SubResource( 21 )
scale_curve = SubResource( 14 )
color_ramp = SubResource( 13 )

[sub_resource type="SpatialMaterial" id=15]
render_priority = 1
flags_transparent = true
flags_unshaded = true
params_billboard_mode = 3
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false
albedo_color = Color( 1, 1, 1, 0.196078 )
albedo_texture = ExtResource( 1 )
detail_enabled = true
detail_blend_mode = 0
detail_uv_layer = 0
uv1_scale = Vector3( 3, 2, 1 )

[sub_resource type="CubeMesh" id=6]
material = SubResource( 15 )
size = Vector3( 0.25, 0.25, 0 )

[sub_resource type="BoxShape" id=10]

[sub_resource type="DynamicFontData" id=12]
font_path = "res://assets/comfortaa.ttf"

[sub_resource type="DynamicFont" id=11]
size = 32
font_data = SubResource( 12 )

[sub_resource type="PlaneMesh" id=17]

[sub_resource type="SpatialMaterial" id=18]
flags_unshaded = true
params_blend_mode = 1
params_depth_draw_mode = 1

[sub_resource type="Environment" id=19]

[sub_resource type="Shader" id=22]
code = "shader_type spatial;
render_mode skip_vertex_transform, unshaded;
render_mode depth_draw_alpha_prepass;

uniform float line_width = 0.1;
uniform bool tangent_facing = false;
uniform bool rounded = false;
float line_process(float width, inout vec3 vertex, vec3 dir_to_cam, vec2 uv,
					inout vec3 normal, inout vec3 tangent){
	vec3 dir_to_next_point = normal;
	vec3 perp = tangent;
	if (!tangent_facing) {
		perp = normalize(cross(dir_to_cam,dir_to_next_point));
	}
	
	float is_end = 0.5-uv.x;
	is_end = float(abs(is_end) > 0.5) * -sign(is_end);
	vec3 rounder = vec3(0.0); 
	if (rounded) { 
		rounder = is_end * normalize(cross(perp,dir_to_cam));
	}

	float side = sign(float(uv.y > 0.5)-0.5);
	vertex += ((perp*side)-rounder) * width;
	
	tangent = perp;
	normal = cross(perp,dir_to_next_point);
	
	return is_end;
}

uniform bool uv_matches_width = true;

varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	is_end = line_process(line_width,VERTEX,normalize(VERTEX),UV,NORMAL,TANGENT);
	
	BINORMAL = cross(TANGENT,NORMAL);
	
	if (uv_matches_width) {
		UV.x /= line_width;
	}
	
	UV.x = 1.0-UV.x;
	
	float line_length = UV2.x;
//	float uv_correct = UV2.y;
	UV2 = UV;
	UV2.x *= line_length;
	
	if (rounded) {
		float uv_correct = is_end*line_width;
		UV.x += uv_correct;
		UV2.x += uv_correct;
	}
}

float getDistToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return length(c)*0.5;
}

float getDistSquaredToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return dot(c,c);
}

vec2 getLineTubeNormal(vec2 uv) {
	vec2 n = vec2(0.5);
		n.x = uv.y;
		if (rounded) {
			n.y = (is_end*0.5+0.5);
		}
	return n;
}

uniform sampler2D albedo_tex : hint_albedo;
uniform bool tex_stretch = true;
uniform vec2 tex_scale = vec2(1.0,1.0);

uniform vec4 color : hint_color = vec4(vec3(1.0),1.0);
uniform float metallic  : hint_range(0.0,1.0,0.005) = 0.0;
uniform float specular  : hint_range(0.0,1.0,0.005) = 0.5;
uniform float roughness : hint_range(0.0,1.0,0.005) = 0.5;

uniform bool tube_normal = true;
void fragment() {
	if (!FRONT_FACING) { NORMAL = -NORMAL; }
	
	if (tube_normal && !tangent_facing) { NORMALMAP.xy = getLineTubeNormal(UV); }
	
	
	if (rounded) {
		if (abs(is_end) > 0.0) {
			ALPHA *= smoothstep(1.0,0.99,getDistToLineCenter(UV)*4.0);
		}
	}
	
	vec2 uv_alb = UV2;
	if (tex_stretch) {
		uv_alb = UV;
	}
	uv_alb *= tex_scale;
	
	vec4 alb_sample = texture(albedo_tex,uv_alb.yx);
	
	ALBEDO = alb_sample.rgb * alb_sample.a * color.rgb;
	SPECULAR = specular;
	ROUGHNESS = roughness;
	METALLIC = metallic;
	
	ALPHA_SCISSOR = 0.001; // uncomment for alpha blending
}"

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 22 )
shader_param/line_width = 0.05
shader_param/tangent_facing = false
shader_param/rounded = true
shader_param/uv_matches_width = true
shader_param/tex_stretch = true
shader_param/tex_scale = Vector2( 1, 1 )
shader_param/color = Color( 1, 1, 1, 0 )
shader_param/metallic = 0.0
shader_param/specular = 0.5
shader_param/roughness = 0.5
shader_param/tube_normal = false

[node name="map" type="Spatial"]
physics_interpolation_mode = 2
script = ExtResource( 3 )

[node name="camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 8 )
current = true

[node name="field" type="Sprite3D" parent="."]
pause_mode = 2
transform = Transform( 0.25, 0, 0, 0, 0.25, 0, 0, 0, 1, 0, 0, 0 )
script = ExtResource( 5 )

[node name="cursor" type="Sprite3D" parent="field"]
transform = Transform( 0.75, 0, 0, 0, 0.75, 0, 0, 0, 1, 0, 0, 0.01 )
render_priority = 2
texture = ExtResource( 1 )

[node name="particles" type="Particles" parent="field/cursor"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.01 )
visible = false
cast_shadow = 0
amount = 10
lifetime = 0.2
visibility_aabb = AABB( -2, -2, -0.25, 99999, 99999, 99999 )
local_coords = false
process_material = SubResource( 5 )
draw_pass_1 = SubResource( 6 )

[node name="ccol" type="Area" parent="field/cursor"]
transform = Transform( 3.5, 0, 0, 0, 3.5, 0, 0, 0, 3, 0, 0, 0 )

[node name="collision" type="CollisionShape" parent="field/cursor/ccol"]
transform = Transform( 1.8, 0, 0, 0, 1.8, 0, 0, 0, 1, 0, 0, 0 )
shape = SubResource( 10 )

[node name="flashlight" type="Sprite3D" parent="field/cursor"]
transform = Transform( 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0 )
visible = false
cast_shadow = 0
billboard = 1
render_priority = 99
texture = ExtResource( 6 )

[node name="bpm" type="Timer" parent="."]

[node name="hits" type="Label" parent="."]
anchor_right = 1.0
margin_bottom = 720.0
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_fonts/font = SubResource( 11 )
text = "0/? | 0%"
align = 1

[node name="lyrics" type="Label" parent="."]
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_fonts/font = SubResource( 11 )
text = "lyrics"
align = 1
valign = 1
script = ExtResource( 2 )

[node name="combo" type="Label" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_fonts/font = SubResource( 11 )
text = "0 combo"
align = 1
valign = 2

[node name="song" type="AudioStreamPlayer" parent="."]
pause_mode = 1

[node name="ground" type="MeshInstance" parent="."]
transform = Transform( 100, 0, 0, 0, 1, 0, 0, 0, 100, 0, -10, 0 )
visible = false
mesh = SubResource( 17 )
material/0 = SubResource( 18 )

[node name="world" type="WorldEnvironment" parent="."]
environment = SubResource( 19 )

[node name="center" type="Label3D" parent="."]
transform = Transform( 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0 )
cast_shadow = 0
billboard = 1
no_depth_test = true
render_priority = 100
modulate = Color( 1, 1, 1, 0.392157 )
text = "+"
font = SubResource( 11 )

[node name="connect" type="Spatial" parent="."]
transform = Transform( 0.1875, 0, 0, 0, 0.1875, 0, 0, 0, 1, 0, 0, 0.01 )
visible = false
script = ExtResource( 4 )
material = SubResource( 23 )

[connection signal="area_entered" from="field/cursor/ccol" to="field" method="_on_ccol_area_entered"]
[connection signal="timeout" from="bpm" to="." method="_on_bpm_timeout"]
